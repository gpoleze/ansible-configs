## https://phoenixnap.com/kb/how-to-install-kubernetes-on-a-bare-metal-server

- name: Update Linux
  apt: 
    update_cache: "yes"

- name: Upgrade Linux
  apt: 
    upgrade: "yes"

- name: Disable swap
  command: swapoff -a

- name: Resolve nftables Backend Compatibility Issue
  command: >-
    update-alternatives --set {{ item }} /usr/sbin/{{ item }}-legacy
  with_items:
  - iptables
  - ip6tables
  - arptables
  - ebtables
  ignore_errors: true

- name: Install ufw
  apt:
    name: ufw
    state: present

- name: Configure Firewall
  ufw: 
    rule: allow
    port: "{{ item }}"
    proto: tcp
  loop:
  - 6443
  - 2379
  - 2380
  - 10250
  - 10251
  - 10252
  - 10255

- name: Configure Firewall
  ufw: 
    state: reloaded

- name: Install required packages
  apt:
    name: "{{ item }}"
  loop:
  - apt-transport-https 
  - ca-certificates 
  - curl 
  - software-properties-common
  
- name: Add Docker key
  apt_key:
    url: https://download.docker.com/linux/debian/gpg
    state: present

- name: Get lsb_release
  command: lsb_release -cs
  register: lsb_release_result

- name: Add Docker Repository
  apt_repository:
    repo: "deb [arch=amd64] https://download.docker.com/linux/debian {{ lsb_release_result.stdout }} stable"
    state: present

- name: Install Docker
  apt:
    name: docker-ce
    state: present
    update_cache: yes

- name: check docker installation
  command: docker run hello-world
  register: docker_hello_world
  failed_when: "'Hello from Docker!' not in docker_hello_world.stdout"

- name: Remove Hello World image
  shell: docker container prune -f && docker rmi hello-world

- name: Change the cgroup-driver
  copy:
    src: files/daemon.json
    dest: /etc/docker/daemon.json

- name: reload daemons
  systemd:
    name: docker
    state: restarted
    daemon_reload: yes

## Actual Kubernetes installation
- name: Add kubernetes key
  apt_key:
    url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
    state: present

- name: Add kubernetes Repository
  apt_repository:
    repo: "deb http://apt.kubernetes.io/ kubernetes-xenial main"
    state: present

- name: Install kubelet, kubeadm and kubectl
  apt:
    name: "{{ item }}"
    state: present
    update_cache: yes
  loop:
  - kubelet
  - kubeadm 
  - kubectl

- name: Hold kubeadm
  dpkg_selections:
    name: "{{ item }}"
    selection: hold
  loop:
  - kubelet
  - kubeadm 
  - kubectl

- name: Check if Kubernetes is already initialized
  stat:
    path: /etc/kubernetes/admin.conf
  register: kubernetes_admin_conf_file

- name: Initialize Kubernetes on Master Node
  command: "kubeadm init --pod-network-cidr=10.244.0.0/16"
  register: master_node_init_result
  when: host_is_master and not kubernetes_admin_conf_file.stat.exists

- name: Untaint master node
  command: kubectl taint nodes --all node-role.kubernetes.io/master-
  when: host_is_master and untaint_master_node

- name: Create 
  when: host_is_master
  file:
    name: /home/ansible/.kube
    state: directory

- name: Copy kube config
  when: host_is_master
  copy:
    remote_src: yes
    src: /etc/kubernetes/admin.conf
    dest: /home/ansible/.kube/config
    owner: ansible
    group: ansible
    mode: 0775

- name: Install Pod Network Add-On (Flannel)
  when: host_is_master
  shell: kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml --kubeconfig /etc/kubernetes/admin.conf

- name: Get Kubernetes Join Command
  when: not host_is_master
  command: kubeadm token create --print-join-command
  register: k8s_join_command

- name: Join Worker Node to Cluster
  when: not host_is_master
  command: "{{ k8s_join_command.stdout }}"